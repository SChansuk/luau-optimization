{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#preface","title":"Preface","text":"<p>This document is intended for intermediate Roblox developers (     i.e. those who have a basic understanding of Roblox Studio API and Luau) who want to improve the performance of their games.</p> <p>This book contains guidelines and advices on how to write efficient software using the Luau language. Software correctness and maintainability are taken into account,  but are not the primary concerns of the guidelines. The guidelines are focused on performance and efficiency.</p>"},{"location":"introduction/","title":"Introduction to Optimization","text":"<p>One of the main reasons for preferring Luau over simpler, higher-level scripting languages is that Luau allows for the  development of complex Roblox games with an efficient use of hardware resources. The language itself doesn't guarantee  efficient code automatically, but it provides a robust set of features that aid developers in achieving performance gains. </p> <p>Sloppy Luau code may be no more efficient than higher-level implementations of the same algorithms,  but a skilled Luau programmer with in-depth knowledge of the language can write software that is efficient  from the start and further optimize it as needed. </p> <p>This guide offers techniques for writing efficient Luau code and optimizing existing game scripts.  Often, there is no single solution to a performance problem that is optimal for all scenarios.  Therefore, optimization typically involves incrementally refactoring code to improve performance,   bringing it closer to the best possible outcome.</p> <p>Effective optimization requires that the codebase is modular enough to isolate performance-critical sections.  With well-structured code, you can then use various tools, libraries, and strategies to enhance these parts,  thereby boosting the overall execution speed of your game. While modern game engines and platforms  like Roblox perform many optimizations automatically, there are still higher-level optimizations that developers must address.  This guide focuses on those optimizations that current engines and compilers cannot (yet) achieve.</p> <p>Most of the optimization techniques discussed are platform-independent, so there will be minimal references to specific operating systems, hardware, or Roblox Studio versions. However, some techniques might be more effective or applicable depending on the specific combinations of platform, hardware, and version of Roblox Studio you are using.</p>"},{"location":"optimization-lifecycle/","title":"Optimization lifecycle","text":"<p>The construction of an efficient software (or game, in this case) should be a continuous process.  It is not a one-time task that you can complete and forget about. </p> <p>To begin with, the algorithms and data structures are designed in a way that makes sense for the application logic  and that is reasonably efficient, but without considering optimization.  When designing a widely used data structure the optimal implementation of which is not obvious  (for example, it is debated whether it is better to use an array or a linked list),  an abstract structure is defined for which the implementation may be changed at the optimization stage. Secondly,  the code that implements the designed algorithms is written, following guidelines to avoid inefficient  operations and encapsulating operations that are likely to require optimization. Thirdly, The resulting software is then tested to increase the probability that it doesn't have crippling defects. And lastly, After having completed the development of a correctly working application, the optimization stage begins, with the following sub-stages:</p>"}]}